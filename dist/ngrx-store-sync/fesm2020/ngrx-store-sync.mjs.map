{"version":3,"file":"ngrx-store-sync.mjs","sources":["../../../projects/ngrx-store-sync/src/lib/tokens.ts","../../../projects/ngrx-store-sync/src/lib/sync.ts","../../../projects/ngrx-store-sync/src/lib/sync.module.ts","../../../projects/ngrx-store-sync/src/lib/adapters.ts","../../../projects/ngrx-store-sync/src/public-api.ts","../../../projects/ngrx-store-sync/src/ngrx-store-sync.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const _INITIAL_SYNC_CONFIG = new InjectionToken('ngrx-store-sync Internal Initial Config');\r\nexport const _SYNC_CONFIG = new InjectionToken('ngrx-store-sync Internal Config');\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Actions, createEffect } from '@ngrx/effects';\r\nimport { State, Store } from '@ngrx/store';\r\n\r\nimport * as deepmerge_ from 'deepmerge';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, mergeMap, pairwise, startWith, tap } from 'rxjs/operators';\r\nimport { StoreStorage, StoreSyncConfig } from './sync.module';\r\nimport { _SYNC_CONFIG } from './tokens';\r\n\r\nconst deepmerge = deepmerge_;\r\nconst detectDate = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})/;\r\n\r\nexport const StorageSyncActions = {\r\n    DUMMY: 'ngrx-store-sync/dummy',\r\n    HYDRATED: 'ngrx-store-sync/hydrated'\r\n};\r\n\r\nconst ignoreActions = [State.INIT, StorageSyncActions.HYDRATED];\r\n\r\n@Injectable()\r\nexport class StorageSyncEffects {\r\n    constructor(\r\n        @Inject(_SYNC_CONFIG) private _config: StoreSyncConfig,\r\n        private _store: Store<any>,\r\n        private _actions$: Actions\r\n    ) {}\r\n\r\n    private _hydrated = false;\r\n\r\n     sync$: Observable<any> = createEffect(() => this._actions$.pipe(\r\n        startWith( { type: StorageSyncActions.DUMMY }),\r\n        tap(action => this._hydrated = this._hydrated || (action.type === StorageSyncActions.HYDRATED)), // Side-effecty :(\r\n        filter(action => ignoreActions.indexOf(action.type) === -1),\r\n        mergeMap(() => this._store.select(s => s)),\r\n        pairwise(),\r\n        filter(() => !this._config.rehydrate || this._hydrated),\r\n        filter(([prev, curr]) => prev !== curr),\r\n        mergeMap(([_, curr]) => syncStateUpdateAsync(\r\n            curr,\r\n            this._config.keys,\r\n            this._config.storage,\r\n            this._config.storageKeySerializer,\r\n            this._config.removeOnUndefined,\r\n            this._config.syncCondition\r\n        ))\r\n    ), { dispatch: false });\r\n}\r\n\r\n/**\r\n * Below this point is essentially a copy-paste of\r\n * https://github.com/btroncone/ngrx-store-localstorage\r\n * modified to interact with an asynchronous storage API\r\n */\r\n\r\n// correctly parse dates from storage\r\nexport const dateReviver = (key: string, value: any) => {\r\n    if (typeof value === 'string' && detectDate.test(value)) {\r\n        return new Date(value);\r\n    }\r\n    return value;\r\n};\r\n\r\nconst dummyReviver = (key: string, value: any) => value;\r\n\r\nexport const rehydrateApplicationStateAsync = (\r\n    keys: any[],\r\n    storage: StoreStorage,\r\n    storageKeySerializer: ((key: string) => string),\r\n    restoreDates: boolean\r\n): Promise<any> => {\r\n    return keys.reduce(async (previousPromise, curr) => {\r\n        const state = await previousPromise;\r\n\r\n        let key = curr;\r\n        let reviver = restoreDates ? dateReviver : dummyReviver;\r\n        let deserialize;\r\n        let decrypt;\r\n\r\n        if (typeof key === 'object') {\r\n            key = Object.keys(key)[0];\r\n            // use the custom reviver function\r\n            if (typeof curr[key] === 'function') {\r\n                reviver = curr[key];\r\n            } else {\r\n                // use custom reviver function if available\r\n                if (curr[key].reviver) {\r\n                    reviver = curr[key].reviver;\r\n                }\r\n                // use custom serialize function if available\r\n                if (curr[key].deserialize) {\r\n                    deserialize = curr[key].deserialize;\r\n                }\r\n            }\r\n\r\n            // Ensure that encrypt and decrypt functions are both presents\r\n            if (curr[key].encrypt && curr[key].decrypt) {\r\n                if (\r\n                    typeof curr[key].encrypt === 'function' &&\r\n                    typeof curr[key].decrypt === 'function'\r\n                ) {\r\n                    decrypt = curr[key].decrypt;\r\n                } else {\r\n                    console.error(\r\n                        `Either encrypt or decrypt is not a function on '${\r\n                            curr[key]\r\n                        }' key object.`\r\n                    );\r\n                }\r\n            } else if (curr[key].encrypt || curr[key].decrypt) {\r\n                // Let know that one of the encryption functions is not provided\r\n                console.error(\r\n                    `Either encrypt or decrypt function is not present on '${\r\n                        curr[key]\r\n                    }' key object.`\r\n                );\r\n            }\r\n        }\r\n\r\n        return storage.get(storageKeySerializer(key)).then(slice => {\r\n            if (slice) {\r\n                // Use provided decrypt function\r\n                if (decrypt) {\r\n                    slice = decrypt(slice);\r\n                    const isObjectRegex = new RegExp('[{\\\\[]');\r\n\r\n                    if (slice === 'null' || isObjectRegex.test(slice.charAt(0))) {\r\n                        slice = JSON.parse(slice, reviver);\r\n                    }\r\n                }\r\n\r\n                return Object.assign({}, state, {\r\n                    [key]: deserialize ? deserialize(slice) : slice\r\n                });\r\n            }\r\n            return state;\r\n        });\r\n    }, storage.ready().then(() => ({})));\r\n};\r\n\r\nexport const syncStateUpdateAsync = (\r\n    state: any,\r\n    keys: any[],\r\n    storage: StoreStorage,\r\n    storageKeySerializer: (key: string) => string = key => key,\r\n    removeOnUndefined = false,\r\n    syncCondition?: (state: any) => boolean\r\n): Promise<void> =>  {\r\n    try {\r\n        if (syncCondition && syncCondition(state) !== true) {\r\n            return Promise.resolve();\r\n        }\r\n    } catch ( e ) {\r\n        // Treat TypeError as do not sync\r\n        if (e instanceof TypeError) {\r\n            return Promise.resolve();\r\n        }\r\n        throw e;\r\n    }\r\n\r\n    return keys.reduce( async (previousPromise, key) => {\r\n        await previousPromise;\r\n\r\n        let stateSlice = state[key];\r\n        let replacer;\r\n        let space;\r\n        let encrypt;\r\n\r\n        if (typeof key === 'object') {\r\n            const name = Object.keys(key)[0];\r\n            stateSlice = state[name];\r\n\r\n            if (typeof stateSlice !== 'undefined' && key[name]) {\r\n                // use serialize function if specified.\r\n                if (key[name].serialize) {\r\n                    stateSlice = key[name].serialize(stateSlice);\r\n                } else {\r\n                    // if serialize function is not specified keyFilter on fields if an array has been provided.\r\n                    let keyFilter;\r\n                    if (key[name].reduce) {\r\n                        keyFilter = key[name];\r\n                    } else if (key[name].filter) {\r\n                        keyFilter = key[name].filter;\r\n                    }\r\n                    if (keyFilter) {\r\n                        stateSlice = keyFilter.reduce((memo, attr) => {\r\n                            memo[attr] = stateSlice[attr];\r\n                            return memo;\r\n                        }, {});\r\n                    }\r\n\r\n                    // Check if encrypt and decrypt are present, also checked at this#rehydrateApplicationState()\r\n                    if (key[name].encrypt && key[name].decrypt) {\r\n                        if (typeof key[name].encrypt === 'function') {\r\n                            encrypt = key[name].encrypt;\r\n                        }\r\n                    } else if (key[name].encrypt || key[name].decrypt) {\r\n                        // If one of those is not present, then let know that one is missing\r\n                        console.error(\r\n                            `Either encrypt or decrypt function is not present on '${\r\n                                key[name]\r\n                            }' key object.`\r\n                        );\r\n                    }\r\n                }\r\n\r\n                /*\r\n                  Replacer and space arguments to pass to JSON.stringify.\r\n                  If these fields don't exist, undefined will be passed.\r\n                 */\r\n                replacer = key[name].replacer;\r\n                space = key[name].space;\r\n            }\r\n\r\n            key = name;\r\n        }\r\n\r\n        if (typeof stateSlice !== 'undefined') {\r\n            if (encrypt) {\r\n                try {\r\n                    // ensure that a string message is passed\r\n                    stateSlice = encrypt(\r\n                        typeof stateSlice === 'string'\r\n                            ? stateSlice\r\n                            : JSON.stringify(stateSlice, replacer, space)\r\n                    );\r\n                } catch (e) {\r\n                    console.warn('Unable to encrypt state:', e);\r\n                }\r\n            }\r\n\r\n            return storage.set(storageKeySerializer(key), stateSlice)\r\n                .catch(() => { throw new Error('Unable to save state to storage'); });\r\n        } else if (typeof stateSlice === 'undefined' && removeOnUndefined) {\r\n            return storage.remove(storageKeySerializer(key))\r\n                .catch(() => { throw new Error(`Exception on removing/cleaning undefined '${key}' state`); });\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }, storage.ready().then(() => undefined));\r\n};\r\n\r\nexport const storageSync = () => (reducer: any) => {\r\n    return (state: any, action: any) => {\r\n        let nextState;\r\n\r\n        // If state arrives undefined, we need to let it through the supplied reducer\r\n        // in order to get a complete state as defined by user\r\n        if ((action.type === State.INIT) && !state) {\r\n            nextState = reducer(state, action);\r\n        } else {\r\n            nextState = state;\r\n        }\r\n\r\n        if (action.type === StorageSyncActions.HYDRATED && action.payload) {\r\n            const overwriteMerge = (destinationArray, sourceArray, _) => sourceArray;\r\n            const options: deepmerge_.Options = {\r\n                arrayMerge: overwriteMerge\r\n            };\r\n            nextState = deepmerge(nextState, action.payload, options);\r\n        }\r\n\r\n        return reducer(nextState, action);\r\n    };\r\n};\r\n","import { APP_INITIALIZER, InjectionToken, Injector, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { ActionReducer, META_REDUCERS, MetaReducer, Store } from '@ngrx/store';\r\nimport { rehydrateApplicationStateAsync, storageSync, StorageSyncActions, StorageSyncEffects } from './sync';\r\nimport { _INITIAL_SYNC_CONFIG, _SYNC_CONFIG } from './tokens';\r\n\r\nexport interface StoreStorage {\r\n    /**\r\n     * Get the value associated with the given key.\r\n     * @param key the key to identify this value\r\n     * @returns Returns a promise with the value of the given key\r\n     */\r\n    get(key: string): Promise<any>;\r\n\r\n    /**\r\n     * Set the value for the given key.\r\n     * @param key the key to identify this value\r\n     * @param value the value for this key\r\n     * @returns Returns a promise that resolves when the key and value are set\r\n     */\r\n    set(key: string, value: any): Promise<any>;\r\n\r\n    /**\r\n     * Remove any value associated with this key.\r\n     * @param key the key to identify this value\r\n     * @returns Returns a promise that resolves when the value is removed\r\n     */\r\n    remove(key: string): Promise<void>;\r\n\r\n    /**\r\n     * Check if the storage is ready to be used\r\n     * @returns Returns a promise that resolves when the storage is ready to be used\r\n     */\r\n    ready(): Promise<any>;\r\n}\r\n\r\nexport interface StoreSyncConfig {\r\n    keys: any[];\r\n    rehydrate?: boolean;\r\n    storage: StoreStorage;\r\n    removeOnUndefined?: boolean;\r\n    restoreDates?: boolean;\r\n    storageKeySerializer?: (key: string) => string;\r\n    syncCondition?: (state: any) => boolean;\r\n}\r\n\r\nexport function _storeInitializerFactory(store: Store<any>, config: StoreSyncConfig): () => Promise<boolean> {\r\n    if (!config.rehydrate) {\r\n        return () => Promise.resolve(true);\r\n    }\r\n\r\n    return () => rehydrateApplicationStateAsync(\r\n        config.keys,\r\n        config.storage,\r\n        config.storageKeySerializer as (key: string) => string, // Config always updated to ensure property is defined (i.e. use identity mapping if none specified)\r\n        config.restoreDates as boolean // Config always updated to ensure property is defined\r\n    ).then(state => {\r\n        store.dispatch({\r\n            type: StorageSyncActions.HYDRATED,\r\n            payload: state\r\n        });\r\n        return true;\r\n    });\r\n}\r\n\r\nexport function _storageSyncReducerFactory(): MetaReducer<any> {\r\n    const sync = storageSync();\r\n    return (reduce: ActionReducer<any>) => sync(reduce);\r\n}\r\n\r\nexport function _validateStateKeys(keys: any[]): any[] {\r\n    return keys.map(key => {\r\n        let attr = key;\r\n\r\n        if (typeof key === 'object') {\r\n            attr = Object.keys(key)[0];\r\n        }\r\n\r\n        if (typeof attr !== 'string') {\r\n            throw new TypeError(\r\n                `StorageSync Unknown Parameter Type: ` +\r\n                `Expected type of string, got ${typeof attr}`\r\n            );\r\n        }\r\n        return key;\r\n    });\r\n}\r\n\r\nexport function _createConfig(\r\n    injector: Injector,\r\n    config: StoreSyncConfig | InjectionToken<StoreSyncConfig>\r\n): StoreSyncConfig {\r\n    const result = config instanceof InjectionToken ? injector.get(config) : config;\r\n    if (result.storageKeySerializer === undefined) {\r\n        result.storageKeySerializer = key => key;\r\n    }\r\n\r\n    if (result.restoreDates === undefined) {\r\n        result.restoreDates = true;\r\n    }\r\n\r\n    _validateStateKeys(result.keys);\r\n    return result;\r\n}\r\n\r\n@NgModule({\r\n    imports: [\r\n        EffectsModule.forFeature([StorageSyncEffects])\r\n    ]\r\n})\r\nexport class StoreSyncRootModule {}\r\n\r\n@NgModule({})\r\nexport class StoreSyncModule {\r\n    public static forRoot(config: StoreSyncConfig | InjectionToken<StoreSyncConfig>): ModuleWithProviders<StoreSyncRootModule> {\r\n        return {\r\n            ngModule: StoreSyncRootModule,\r\n            providers: [\r\n                { provide: _INITIAL_SYNC_CONFIG, useValue: config },\r\n                { provide: _SYNC_CONFIG, deps: [Injector, _INITIAL_SYNC_CONFIG], useFactory: _createConfig },\r\n                { provide: META_REDUCERS, useFactory: _storageSyncReducerFactory, multi: true },\r\n                { provide: APP_INITIALIZER, deps: [Store, _SYNC_CONFIG], useFactory: _storeInitializerFactory, multi: true }\r\n            ]\r\n        };\r\n    }\r\n}\r\n","import { StoreStorage } from './sync.module';\r\n\r\n/**\r\n * Adapter for synchronous Web Storage-based syncing. (i.e. localStorage, sessionStorage)\r\n */\r\nexport class WebStorageStoreStorage implements StoreStorage {\r\n    constructor(private _storage: Storage) {}\r\n\r\n    get(key: string): Promise<any> {\r\n        return Promise.resolve(this._storage.getItem(key));\r\n    }\r\n\r\n    remove(key: string): Promise<void> {\r\n        return Promise.resolve(this._storage.removeItem(key));\r\n    }\r\n\r\n    set(key: string, value: any): Promise<any> {\r\n        const originalValue = value;\r\n        return new Promise<any>(resolve => {\r\n            this._storage.setItem(key, value);\r\n            resolve(originalValue);\r\n        });\r\n    }\r\n\r\n    ready(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","/*\r\n * Public API Surface of ngrx-store-sync\r\n */\r\nexport { StoreSyncConfig, StoreStorage, StoreSyncModule } from './lib/sync.module';\r\nexport { WebStorageStoreStorage } from './lib/adapters';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1"],"mappings":"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"}